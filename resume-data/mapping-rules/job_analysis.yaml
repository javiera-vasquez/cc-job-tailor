# Job Analysis Transformation Rules
# This file defines how to analyze job postings and extract structured information

schema_version: "1.0"
description: "Rules for analyzing job postings and creating structured job analysis data"

# Target output schema for job analysis (optimized v2.0)
target_schema:
  job_analysis:
    # Core job information
    company: "string"           # Company name
    position: "string"          # Job position title
    job_focus: "string"         # ai_ml_focused | qa_testing_focused | frontend_ui_focused | backend_systems_focused | fullstack_focused
    location: "string"          # Job location
    employment_type: "string"   # Full-time, Part-time, Contract, etc.
    experience_level: "string"  # Junior, Mid-level, Senior, Lead, Principal

    # Prioritized requirements with weights (1-10 scale)
    requirements:
      must_have_skills:        # Required skills with priority weights
        - skill: "string"
          priority: "number"    # 1-10, higher = more critical
      nice_to_have_skills:      # Preferred skills with weights
        - skill: "string"
          priority: "number"    # 1-10
      soft_skills: "array[string]"  # Soft skills (unweighted)
      experience_years: "number"    # Years of experience required
      education: "string"           # Education requirements

    responsibilities:
      primary: "array[string]"      # Main job responsibilities (max 5)
      secondary: "array[string]"    # Additional responsibilities (max 3)

    # Merged context section (replaces team_context, unique_opportunities, growth_potential)
    role_context:
      department: "string"          # Department/team name
      team_size: "string"           # Team scale/users served
      key_points: "array[string]"   # Critical context points (max 5)

    # Candidate alignment analysis (NEW)
    candidate_alignment:
      strong_matches: "array[string]"      # Skills/experience we have that match
      gaps_to_address: "array[string]"     # Missing skills that are important
      transferable_skills: "array[string]" # How to bridge gaps (e.g., "Python â†’ Go")
      emphasis_strategy: "string"          # One-line strategy for resume focus

    # Section priorities for resume tailoring (NEW)
    section_priorities:
      technical_expertise: "array[string]"  # Ordered list of expertise categories to emphasize
      experience_focus: "string"            # Which achievements to highlight
      project_relevance: "string"           # Which projects to include/exclude

    # Optimization actions (replaces verbose tips)
    optimization_actions:
      LEAD_WITH: "array[string]"     # Skills/experiences to put first
      EMPHASIZE: "array[string]"     # Areas to expand on
      QUANTIFY: "array[string]"      # Metrics to highlight
      DOWNPLAY: "array[string]"      # Areas to minimize

    # Simplified ATS analysis
    ats_analysis:
      title_variations: "array[string]"     # Alternative job title formats (max 3)
      critical_phrases: "array[string]"     # Must-include phrases (max 5)

    # Basic metadata
    application_info:
      posting_url: "string"                 # Original job posting URL
      posting_date: "string"                # When job was posted
      deadline: "string"                    # Application deadline if mentioned

# Analysis transformation rules
transformation_rules:

  # Job focus determination logic (worker-agnostic profiles)
  focus_determination:
    # Generic focus areas that can apply to any technical worker
    description: "Determine focus based on job requirements, not worker background"

    profiles:
      ai_ml_focused:
        keywords: ["AI", "Machine Learning", "ML", "LLM", "GPT", "Natural Language",
                  "Computer Vision", "Deep Learning", "Neural Networks", "TensorFlow",
                  "PyTorch", "Data Science", "Algorithm", "Vector", "Embedding",
                  "Semantic Search", "LangChain", "LangGraph", "OpenAI", "Artificial Intelligence"]
        weight: 3
        description: "Jobs requiring AI/ML expertise regardless of primary role"

      qa_testing_focused:
        keywords: ["QA", "Quality Assurance", "Testing", "Test Automation", "Selenium",
                  "Jest", "Cypress", "Playwright", "E2E", "Unit Testing", "Integration Testing",
                  "CI/CD", "DevOps", "Test Coverage", "Regression", "Bug", "Quality",
                  "Automation", "Performance Testing"]
        weight: 2
        description: "Jobs emphasizing testing and quality assurance practices"

      frontend_ui_focused:
        keywords: ["React", "Vue", "Angular", "Frontend", "JavaScript", "TypeScript",
                  "CSS", "HTML", "UI/UX", "React Native", "Next.js", "Svelte",
                  "Frontend Development", "User Interface", "Responsive Design",
                  "Web Development", "Mobile App", "User Experience"]
        weight: 2
        description: "Jobs centered on frontend/UI development"

      backend_systems_focused:
        keywords: ["Backend", "API", "Database", "Server", "Microservices", "Cloud",
                  "AWS", "Docker", "Kubernetes", "Node.js", "Python", "Java",
                  "System Architecture", "Infrastructure", "DevOps"]
        weight: 2
        description: "Jobs focused on backend systems and infrastructure"

      fullstack_focused:
        keywords: ["Full Stack", "Full-Stack", "End-to-End", "MERN", "MEAN",
                  "Frontend and Backend", "Web Application", "Complete Solution"]
        weight: 1
        description: "Jobs requiring both frontend and backend expertise"

  # Experience level mapping
  experience_mapping:
    junior: ["Junior", "Entry Level", "0-2 years", "Graduate", "New Grad"]
    mid_level: ["Mid-level", "Intermediate", "2-4 years", "3-5 years"]
    senior: ["Senior", "5+ years", "7+ years", "Lead", "Staff"]
    principal: ["Principal", "Architect", "10+ years", "Distinguished"]

  # Company size indicators
  company_size_mapping:
    startup: ["Startup", "Early Stage", "Series A", "Series B", "< 50 employees"]
    mid_size: ["Mid-size", "Scale-up", "Series C", "50-500 employees"]
    large: ["Large", "Enterprise", "Fortune 500", "1000+ employees"]

  # Skill categorization
  skill_categorization:
    technical_skills:
      frontend: ["React", "Vue", "Angular", "JavaScript", "TypeScript", "CSS", "HTML",
                "Next.js", "Svelte", "React Native", "Redux", "GraphQL"]
      backend: ["Node.js", "Python", "Java", "Go", "Ruby", "PHP", "C#", ".NET",
               "Spring", "Django", "Express", "FastAPI"]
      database: ["SQL", "PostgreSQL", "MySQL", "MongoDB", "Redis", "Elasticsearch"]
      cloud: ["AWS", "Azure", "GCP", "Docker", "Kubernetes", "Terraform"]
      ai_ml: ["Machine Learning", "AI", "TensorFlow", "PyTorch", "Scikit-learn",
             "LangChain", "OpenAI", "Vector Databases"]

    soft_skills:
      communication: ["Communication", "Presentation", "Documentation", "Writing"]
      leadership: ["Leadership", "Mentoring", "Team Lead", "Management", "Coaching"]
      collaboration: ["Collaboration", "Cross-functional", "Agile", "Scrum", "Teamwork"]
      analytical: ["Problem Solving", "Analytical", "Critical Thinking", "Research"]

# Extraction patterns for common job posting formats
extraction_patterns:

  # Common section headers
  section_headers:
    requirements: ["Requirements", "Qualifications", "Must Have", "Skills Required"]
    responsibilities: ["Responsibilities", "What You'll Do", "Role Description", "Duties"]
    benefits: ["Benefits", "What We Offer", "Perks", "Compensation"]
    company: ["About Us", "Company", "About [Company Name]"]

  # Requirement parsing patterns
  requirement_patterns:
    years_experience:
      - "\\d+ years? (of )?experience"
      - "\\d+\\+ years?"
      - "At least \\d+ years?"

    education:
      - "Bachelor'?s? (degree)?"
      - "Master'?s? (degree)?"
      - "PhD|Doctorate"
      - "Computer Science|CS|Engineering"

    must_have_indicators: ["Required", "Must have", "Essential", "Mandatory"]
    nice_to_have_indicators: ["Preferred", "Nice to have", "Bonus", "Plus", "Advantage"]

# Output validation rules (v2.0)
validation_rules:
  required_fields:
    - "job_analysis.company"
    - "job_analysis.position"
    - "job_analysis.job_focus"
    - "job_analysis.requirements.must_have_skills"
    - "job_analysis.candidate_alignment"
    - "job_analysis.section_priorities"
    - "job_analysis.optimization_actions"

  field_constraints:
    - field: "job_analysis.job_focus"
      allowed_values: ["ai_ml_focused", "qa_testing_focused", "frontend_ui_focused", "backend_systems_focused", "fullstack_focused"]

    - field: "job_analysis.requirements.must_have_skills"
      min_items: 3
      max_items: 10
      note: "Each item must have skill and priority (1-10)"

    - field: "job_analysis.requirements.nice_to_have_skills"
      max_items: 8
      note: "Each item must have skill and priority (1-10)"

    - field: "job_analysis.responsibilities.primary"
      max_items: 5

    - field: "job_analysis.responsibilities.secondary"
      max_items: 3

    - field: "job_analysis.role_context.key_points"
      max_items: 5

    - field: "job_analysis.ats_analysis.title_variations"
      max_items: 3

    - field: "job_analysis.ats_analysis.critical_phrases"
      max_items: 5

  data_quality:
    - rule: "Prioritize skills with weights for clear guidance"
    - rule: "Provide explicit candidate alignment analysis"
    - rule: "Use action codes for optimization instead of verbose tips"
    - rule: "Keep context points concise and actionable"

# Usage instructions for job-tailor agent (v2.0)
usage_instructions: |
  1. Parse job posting text using extraction patterns
  2. Apply focus determination logic based on keyword analysis
  3. Extract requirements and assign priority weights (1-10 scale)
  4. Analyze candidate fit to create alignment section:
     - Identify strong matches from candidate's background
     - Note gaps that need addressing
     - Map transferable skills to bridge gaps
  5. Define section priorities for resume tailoring
  6. Create optimization action codes (LEAD_WITH, EMPHASIZE, etc.)
  7. Merge verbose sections into concise role_context
  8. Validate against v2.0 constraints
  9. Store as job_analysis.yaml in company-specific folder

# Output template structure (v2.0 - optimized)
output_template: |
  version: "2.0.0"
  analysis_date: "{{ current_date }}"
  source: "{{ job_source }}"

  job_analysis:
    # Core info
    company: "{{ company_name }}"
    position: "{{ position_title }}"
    job_focus: "{{ determined_focus }}"  # ai_ml_focused | qa_testing_focused | frontend_ui_focused | backend_systems_focused | fullstack_focused
    location: "{{ location }}"
    employment_type: "{{ employment_type }}"
    experience_level: "{{ experience_level }}"

    # Prioritized requirements
    requirements:
      must_have_skills:
        - skill: "{{ skill1 }}"
          priority: 10  # Most critical
        - skill: "{{ skill2 }}"
          priority: 8
      nice_to_have_skills:
        - skill: "{{ optional_skill1 }}"
          priority: 5
      soft_skills: ["{{ soft_skill1 }}", "{{ soft_skill2 }}"]
      experience_years: {{ years }}
      education: "{{ education }}"

    responsibilities:
      primary: ["{{ responsibility1 }}", "{{ responsibility2 }}"]  # Max 5
      secondary: ["{{ secondary1 }}"]  # Max 3

    # Merged context
    role_context:
      department: "{{ department }}"
      team_size: "{{ team_scale }}"
      key_points:
        - "{{ key_point1 }}"
        - "{{ key_point2 }}"

    # Candidate fit analysis
    candidate_alignment:
      strong_matches: ["{{ match1 }}", "{{ match2 }}"]
      gaps_to_address: ["{{ gap1 }}", "{{ gap2 }}"]
      transferable_skills: ["{{ transfer1 }}"]
      emphasis_strategy: "{{ strategy_one_liner }}"

    # Resume guidance
    section_priorities:
      technical_expertise: ["{{ category1 }}", "{{ category2 }}"]
      experience_focus: "{{ experience_guidance }}"
      project_relevance: "{{ project_guidance }}"

    # Action codes
    optimization_actions:
      LEAD_WITH: ["{{ lead1 }}", "{{ lead2 }}"]
      EMPHASIZE: ["{{ emphasize1 }}"]
      QUANTIFY: ["{{ metric1 }}"]
      DOWNPLAY: ["{{ downplay1 }}"]

    # Simplified ATS
    ats_analysis:
      title_variations: ["{{ title1 }}", "{{ title2 }}"]
      critical_phrases: ["{{ phrase1 }}", "{{ phrase2 }}"]

    # Metadata
    application_info:
      posting_url: "{{ url }}"
      posting_date: "{{ date }}"
      deadline: "{{ deadline }}"